                                                        NOTES
                                                        -----
Indecision App
--------------

Setting up a Web Server
    - live-server with npm

Hello React
    - Going to define a template, and then render it in the <body> of our index.html page
    - For now, use React by the CDN (<script>)
    - React can be used in many different contexts, such as react-vr for VR development, react-native, etc.
        - Each package gets installed separately
        - We're using react-dom -> Let's us render our React template to the browser
    - If you run live-server and check DevTools console, we now have access to the React and ReactDOM objects
    - JSX = Javascript XML
        - Javascript syntax extension - not part of the core language. It is provided by React
            - Other example of extending languages you might be familiar with -> CSS (SCSS, LESS)
        - In app.js -> var template = <p>This is JSX from app.js!</p>
            - Looks weird, but this is your first JSX static template, congrats!

        - var appRoot = document.getElementById('app');
          ReactDOM.render(template, appRoot);

            - ReactDOM.render(<template you want to render>, <element you want to render the template on>)
                - Used to render our template, as you can see
        - If you try to now run index.html in the browser, you get an "Unexpected token <" error - what gives??
            - Remember, JSX is NOT part of Javascript's core; It is an extension. That means that the browser doesn't understand html tags in your *js file!
        - To solve this, we need to convert our JSX code to JS code. We do this with Babel
            - We'll compile our JSX to JS, as well as compile it to ES5 code. We'll still be able to code in JSX, and let Babel do the work
            - So -> var template = <p>This is JSX from app.js!</p> now translates to -> var template = React.createElement("p", null, "This is JSX from app.js!");
                - React.createElement(<tag>, <attributes (object form)>, <content in tag>);
                    - Ex: React.createElement("h1", { id: "someId" }, "Something new"); -> <h1 id="someId">Something new</h1>
                - This is something the browser understands

Setting Up Babel
    - babel-cli@6.24.1
    - yarn init -> exactly like npm init
    - yarn.lock -> exactly like package-lock
    - Made a src/app.js file
        - This is where we will write our JSX code
        - Then, the babel compiled code will go into scripts/app.js, which index.html will look at in order to render everything on the page
    - babel src/app.js --out-file=public/scripts/app.js --presets=env,react
        - babel <file we want to compile> <file we want to dump our compiled code to> <any presets we want to use for the compilation process>
        - Calling the command changed the code in scripts/app.js!
        - You can add --watch to the previous command to automatically have changed compiled into scripts/app.js

Exploring JSX
    - Let's add more info besides our <h1> tag -> var template = <h1>Indecision App</h1><p>This is some info</p>;
    - If we try to compile the code we now get an error -> "JSX expressions must have one parent element"
        - Just like Vue with templates, with JSX, you can only have ONE root element, not two!
        - Solution: Surround everything in a <div> -> var template = <div><h1>Indecision App</h1><p>This is some info</p></div>;
            - You can put the code on new lines, save the file, and see that nothing changes in the browser. Babel understands that formatting:
                - var template =
                    <div>
                        <h1>Indecision App</h1>
                        <p>This is some info</p>
                    </div>;
            - The formatting can look a little wonky though. Total preference, but you can add parentheses in the beginning and end if you want:
                - var template = (
                    <div>
                        <h1>Indecision App</h1>
                        <p>This is some info</p>
                    </div>
                  )

JSX Expressions
    - <h1>Michael Ababio</h1>
        - Right now, this is statically defined. The only way to change this name is to go in the JSX file and manually change it
        - We want to replace it with a variable, so we can dynamically change the name
            - Just like Vue, etc.

    - var userName = 'Andrew';
      <h1>{userName}</h1>

        - Notice how we only use ONE set of curly braces
        - You can put any Javascript expression in there (again, like Vue, etc.)
        - Ex: var userName = 'Michael';
              var userAge = 26;
              var userLocation = 'Madison';
              var templateTwo = (
                  <div>
                      <h1>{userName}</h1>
                      <p>Age: {userAge}</p>
                      <p>Location: {userLocation}</p>
                  </div>
              ); 

        - What about objects??
            - var user = {
                name: 'Michael',
                age: 26,
                location: 'Madison'
              }
              <h1>{user}</h1> // Throws an error!

            - We get an error in the console that 'Objects are not valid as a React child'
            - Basically, React doesn't know how you want to render an object itself
                - You can still use an object's keys though -> <h1>{user.name}</h1> // This works!

Conditional Rendering in JSX
    - 








                                            EXAMPLES
                                            --------

Example 1 - 
---------
